{"version":3,"sources":["api.js","sagas/UserListSaga.js","components/loading.js","components/user-list.js","sagas/UserSaga.js","sagas/ACLSaga.js","components/user-card-edit.js","components/user-card.js","sagas/RootSaga.js","reducers.js","App.js","serviceWorker.js","index.js"],"names":["rootPath","resolveRoute","route","params","replace","match","p","p1","Api","axios","get","then","response","Promise","resolve","setTimeout","post","fetchWatcher","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAILURE","initialState","data","takeLatest","call","api","fetch","put","type","error","Loading","style","textAlign","width","CircularProgress","UserList","this","userListReady","props","fetchUserList","length","event","page","history","push","fetching","Table","TableHead","TableRow","TableCell","align","TableBody","Snackbar","open","message","slice","map","row","key","name","hover","role","tabIndex","component","scope","to","userId","email","TableFooter","TablePagination","colSpan","count","rowsPerPage","rowsPerPageOptions","onChangePage","handleChangePage","bind","React","Component","connect","state","userListReducer","dispatch","USER_REQUEST","USER_SUCCESS","USER_FAILURE","phone","acls","action","payload","ACL_LIST_REQUEST","ACL_LIST_SUCCESS","ACL_LIST_FAILURE","UserCardEdit","onClose","aclList","initialValues","onSubmit","values","setSubmitting","alert","JSON","stringify","closeForm","apply","touched","errors","isSubmitting","handleSubmit","handleChange","handleBlur","htmlFor","display","id","placeholder","value","className","onChange","onBlur","render","arrayHelpers","Object","entries","checked","includes","e","target","idx","indexOf","remove","Button","variant","color","disabled","onClick","UserCard","edit","fetchUser","aclListLoaded","fetchAclList","keys","setState","goBack","isExact","aclId","resolveAccessName","cardLoaded","handleEditClick","path","handleFormClose","userReducer","aclReducer","selectedUser","find","el","assign","rootSaga","all","userListFetchWatcher","userFetchWatcher","aclFetchWatcher","reducers","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","App","classes","makeStyles","theme","root","marginTop","spacing","overflowX","Paper","from","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa33f5cf.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst rootPath = '/api/';\r\n\r\nfunction resolveRoute(route, params) {\r\n    return rootPath + route.replace(/({(\\S+)})/g, (match, p, p1) => params[p1])\r\n}\r\n\r\nexport default class Api {\r\n    static fetch(route, params) {\r\n        return axios.get(resolveRoute(route, params)).then(response => new Promise(resolve => setTimeout(() => resolve(response), 2000)))\r\n    }\r\n\r\n    static save(route, params) {\r\n        return axios.post(resolveRoute(route, params))\r\n    }\r\n}","import {call, put, takeLatest} from 'redux-saga/effects'\r\nimport api from \"../api\";\r\n\r\nexport const USER_LIST_REQUEST = 'USER_LIST_REQUEST';\r\nexport const USER_LIST_SUCCESS = 'USER_LIST_SUCCESS';\r\nexport const USER_LIST_FAILURE = 'USER_LIST_FAILURE';\r\n\r\nexport const initialState = {\r\n    data: []\r\n}\r\n\r\nexport function* fetchWatcher() {\r\n    yield takeLatest(USER_LIST_REQUEST, function* () {\r\n        try {\r\n            const response = yield call(api.fetch, 'user-list.json');\r\n            yield put({type: USER_LIST_SUCCESS, data: response.data});\r\n        } catch (error) {\r\n            yield put({type: USER_LIST_FAILURE, error});\r\n        }\r\n    });\r\n}\r\n\r\nexport function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_LIST_REQUEST:\r\n            return {...state, fetching: true, data: [], error: null};\r\n        case USER_LIST_SUCCESS:\r\n            return {...state, fetching: false, data: action.data};\r\n        case USER_LIST_FAILURE:\r\n            return {...state, fetching: false, data: [], error: 'Невозможно загрузить список пользователей: ' + action.error.message};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst Loading = () => (\r\n    <div style={{textAlign: 'center', width: '100%'}}>\r\n        <CircularProgress />\r\n    </div>\r\n)\r\nexport default Loading;","import React from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from \"@material-ui/core/TableFooter\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport {initialState, USER_LIST_REQUEST} from \"../sagas/UserListSaga\";\r\nimport Loading from \"./loading\";\r\n\r\nclass UserList extends React.Component {\r\n    componentDidMount() {\r\n        !this.userListReady() && this.props.fetchUserList();\r\n    }\r\n\r\n    /**\r\n     * Возвращает статус готовности списка пользователей\r\n     * @returns {boolean}\r\n     */\r\n    userListReady() {\r\n        return !!this.props.data.length;\r\n    }\r\n\r\n    /**\r\n     * Переход по страницам при нажатию на кнопки пагинации\r\n     * @param event\r\n     * @param page\r\n     */\r\n    handleChangePage(event, page) {\r\n        this.props.history.push('/users/page/' + (page + 1));\r\n    }\r\n\r\n    render() {\r\n        const {fetching, data, error} = this.props;\r\n        const page = this.props.match.params.page - 1;\r\n        const rowsPerPage = 10;\r\n\r\n        return fetching ? (\r\n            <Loading />\r\n        ) : (\r\n            <div>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>ID</TableCell>\r\n                        <TableCell align=\"right\">User Name</TableCell>\r\n                        <TableCell align=\"right\">Email</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {error ? (\r\n                        <Snackbar open={true} message={error}/>\r\n                    ) : data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\r\n                        return (\r\n                            <TableRow key={row.name}\r\n                                      hover\r\n                                      role=\"checkbox\"\r\n                                      tabIndex={-1}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    <Link to={`/users/${row.userId}/`} >\r\n                                        {row.userId}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <Link to={`/users/${row.userId}/`} >\r\n                                        {row.name}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">\r\n                                    <Link to={`/users/${row.userId}/`} >\r\n                                        {row.email}\r\n                                    </Link>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    })}\r\n                </TableBody>\r\n                <TableFooter>\r\n                    <TableRow>\r\n                        <TablePagination\r\n                            colSpan={3}\r\n                            count={data.length}\r\n                            rowsPerPage={10}\r\n                            rowsPerPageOptions={[10]}\r\n                            page={page}\r\n                            onChangePage={this.handleChangePage.bind(this)}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Table>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return state.userListReducer || initialState;\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchUserList: () => dispatch({ type: USER_LIST_REQUEST })\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList);","import {call, put, takeLatest} from 'redux-saga/effects'\r\nimport api from \"../api\";\r\n\r\nexport const USER_REQUEST = 'USER_REQUEST';\r\nexport const USER_SUCCESS = 'USER_SUCCESS';\r\nexport const USER_FAILURE = 'USER_FAILURE';\r\n\r\nexport const initialState = {\r\n    data: {\r\n        userId: '',\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        acls: []\r\n    }\r\n}\r\n\r\n/**\r\n * Стандартная связка редакс-саги\r\n * В воркер передается userId в составе payload\r\n * @returns {IterableIterator<SimpleEffect<\"FORK\", ForkEffectDescriptor>>}\r\n */\r\nexport function* fetchWatcher() {\r\n    yield takeLatest(USER_REQUEST, function* (action) {\r\n        const userId = action.payload.userId;\r\n        try {\r\n            const response = yield call(api.fetch, 'user/{userId}.json', {userId});\r\n            yield put({type: USER_SUCCESS, data: {...response.data, userId}});\r\n        } catch (error) {\r\n            yield put({type: USER_FAILURE, error});\r\n        }\r\n    });\r\n}\r\n\r\nexport function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case USER_REQUEST:\r\n            return {...state, fetching: true, data: {userId: action.payload.userId}, error: null};\r\n        case USER_SUCCESS:\r\n            return {...state, fetching: false, data: action.data};\r\n        case USER_FAILURE:\r\n            return {...state, fetching: false, error: 'Невозможно загрузить карточку пользователя: ' + action.error.message};\r\n        default:\r\n            return state;\r\n    }\r\n}","import {call, put, takeLatest} from 'redux-saga/effects'\r\nimport api from \"../api\";\r\n\r\nexport const ACL_LIST_REQUEST = 'ACL_LIST_REQUEST';\r\nexport const ACL_LIST_SUCCESS = 'ACL_LIST_SUCCESS';\r\nexport const ACL_LIST_FAILURE = 'ACL_LIST_FAILURE';\r\n\r\nexport const initialState = {\r\n    data: {}\r\n}\r\n\r\nexport function* fetchWatcher() {\r\n    yield takeLatest(ACL_LIST_REQUEST, function* () {\r\n        try {\r\n            const response = yield call(api.fetch, 'access-levels.json');\r\n            yield put({type: ACL_LIST_SUCCESS, data: response.data});\r\n        } catch (error) {\r\n            yield put({type: ACL_LIST_FAILURE, error});\r\n        }\r\n    });\r\n}\r\n\r\nexport function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case ACL_LIST_REQUEST:\r\n            return {...state, fetching: true, data: {}, error: null};\r\n        case ACL_LIST_SUCCESS:\r\n            return {...state, fetching: false, data: action.data};\r\n        case ACL_LIST_FAILURE:\r\n            return {...state, fetching: false, data: {}, error: 'Невозможно загрузить список полномочий: ' + action.error.message};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\nimport { Formik, FieldArray } from \"formik\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport default class UserCardEdit extends React.Component {\r\n    state = {\r\n        data: {}\r\n    }\r\n\r\n    /**\r\n     * Закрытие формы и передача управления родительскому компоненту\r\n     */\r\n    closeForm() {\r\n        this.props.onClose();\r\n    }\r\n\r\n    render() {\r\n        const {data, aclList} = this.props;\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    initialValues={data}\r\n                    onSubmit={(values, {setSubmitting}) => {\r\n                        alert(JSON.stringify(values, null, 2));\r\n                        setSubmitting(false);\r\n                        this.closeForm.apply(this)\r\n\r\n                    }}>\r\n                    {props => {\r\n                        const {\r\n                            values,\r\n                            touched,\r\n                            errors,\r\n                            isSubmitting,\r\n                            handleSubmit,\r\n                            handleChange,\r\n                            handleBlur\r\n                        } = props;\r\n                        return (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <label htmlFor=\"name\" style={{display: 'block'}}>\r\n                                    User Name\r\n                                </label>\r\n                                <input\r\n                                    id=\"name\"\r\n                                    placeholder=\"Enter user name\"\r\n                                    type=\"text\"\r\n                                    value={values.name}\r\n                                    className={\r\n                                        errors.name && touched.name ? 'text-input error' : 'text-input'\r\n                                    }\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <label htmlFor=\"email\" style={{display: 'block'}}>\r\n                                    Email\r\n                                </label>\r\n                                <input\r\n                                    id=\"email\"\r\n                                    placeholder=\"Enter user's email\"\r\n                                    type=\"text\"\r\n                                    value={values.email}\r\n                                    className={\r\n                                        errors.email && touched.email ? 'text-input error' : 'text-input'\r\n                                    }\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <label htmlFor=\"phone\" style={{display: 'block'}}>\r\n                                    Phone\r\n                                </label>\r\n                                <input\r\n                                    id=\"phone\"\r\n                                    placeholder=\"Enter user phone\"\r\n                                    type=\"text\"\r\n                                    value={values.phone}\r\n                                    className={\r\n                                        errors.phone && touched.phone ? 'text-input error' : 'text-input'\r\n                                    }\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                <FieldArray\r\n                                    name=\"acls\"\r\n                                    render={arrayHelpers => (\r\n                                        <div>\r\n                                            {Object.entries(aclList).map(([id, name]) => (\r\n                                                <div key={id}>\r\n                                                    <input\r\n                                                        name=\"acls\"\r\n                                                        type=\"checkbox\"\r\n                                                        value={id}\r\n                                                        checked={values.acls.includes(id*1)}\r\n                                                        onChange={e => {\r\n                                                            if (e.target.checked) arrayHelpers.push(id*1);\r\n                                                            else {\r\n                                                                const idx = values.acls.indexOf(id*1);\r\n                                                                arrayHelpers.remove(idx);\r\n                                                            }\r\n                                                        }}\r\n                                                    />{name}\r\n                                                </div>\r\n                                                ))}\r\n                                        </div>\r\n                                    )}\r\n                                />\r\n\r\n                                <p>\r\n                                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={isSubmitting}>\r\n                                        Сохранить\r\n                                    </Button>\r\n                                    <Button onClick={this.closeForm.bind(this)}>\r\n                                        Закрыть\r\n                                    </Button>\r\n                                </p>\r\n                            </form>\r\n                        );\r\n                    }}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { initialState, USER_REQUEST } from \"../sagas/UserSaga\";\r\nimport { ACL_LIST_REQUEST } from \"../sagas/ACLSaga\";\r\nimport { connect } from \"react-redux\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Loading from \"./loading\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport UserCardEdit from \"./user-card-edit\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nclass UserCard extends React.Component {\r\n    state = {\r\n        edit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchUser(this.props.match.params.id);\r\n        !this.aclListLoaded() && this.props.fetchAclList()\r\n    }\r\n\r\n    /**\r\n     * Подставляет имя полномочия по его ИД\r\n     * @param id\r\n     * @returns {*}\r\n     */\r\n    resolveAccessName(id) {\r\n        if (!Object.keys(this.props.aclList).length) return 'loading...';\r\n        return this.props.aclList[id];\r\n    }\r\n\r\n    /**\r\n     * Возвращает статус готовности списка полномочий\r\n     * @returns {boolean}\r\n     */\r\n    aclListLoaded() {\r\n        return !!Object.keys(this.props.aclList).length;\r\n    }\r\n\r\n    /**\r\n     * Возвращает статус готовности карточки\r\n     * @returns {boolean}\r\n     */\r\n    cardLoaded() {\r\n        return !this.props.fetching && !!Object.keys(this.props.data).length;\r\n    }\r\n\r\n    /**\r\n     * Обработка нажатия кнопки Редактировать\r\n     * @param event\r\n     */\r\n    handleEditClick(event) {\r\n        this.props.history.push(`/users/${this.props.match.params.id}/edit`);\r\n        this.setState({edit: true})\r\n    }\r\n\r\n    /**\r\n     * Обработка закрытия формы редактирования\r\n     */\r\n    handleFormClose() {\r\n        this.props.history.goBack();\r\n        this.setState({edit: false});\r\n    }\r\n\r\n    render() {\r\n        const {fetching, error, data} = this.props\r\n        return  this.props.match.isExact ? (\r\n            <div>\r\n                <p><label>User Name: </label>{data.name}</p>\r\n                <p><label>Email: </label>{data.email}</p>\r\n                {fetching\r\n                    ? (<Loading/>)\r\n                    : error ? (\r\n                        <Snackbar open={true} message={error}/>\r\n                    ) : (\r\n                        <div>\r\n                            <p><label>Phone: </label>{data.phone}</p>\r\n                            {data.acls.map(aclId => (\r\n                                <p key={aclId}><label>Access: </label>{this.resolveAccessName(aclId)}</p>\r\n                            ))}\r\n                        </div>\r\n                    )\r\n                }\r\n                {this.cardLoaded() && this.aclListLoaded() ? (\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleEditClick.bind(this)}>\r\n                        Редактировать\r\n                    </Button>\r\n                ) : ('')}\r\n            </div>\r\n        ) : (\r\n            <Route\r\n                path='/users/:id/edit'\r\n                render={(props) => <UserCardEdit {...props} data={this.props.data} aclList={this.props.aclList} onClose={this.handleFormClose.bind(this)} />} />\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Собираем в кучу данные по пользователю из списка и из карточки\r\n * @param state\r\n * @returns {({} & reducer & {data: *}) | ({} & {data} & {data: *})}\r\n */\r\nconst mapStateToProps = state => {\r\n    const userReducer = {...(state.userReducer || initialState), aclList: state.aclReducer.data};\r\n    if (userReducer.error) return userReducer;\r\n\r\n    const selectedUser = state.userListReducer.data.find(el => el.userId === userReducer.data.userId)\r\n    if (!selectedUser) return userReducer;\r\n\r\n    Object.assign(userReducer.data, selectedUser);\r\n    return userReducer;\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchUser: userId => dispatch({type: USER_REQUEST, payload: {userId}}),\r\n        fetchAclList: () => dispatch({type: ACL_LIST_REQUEST}),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserCard);","import { all } from 'redux-saga/effects';\r\nimport { fetchWatcher as userListFetchWatcher } from './UserListSaga';\r\nimport { fetchWatcher as userFetchWatcher } from './UserSaga';\r\nimport { fetchWatcher as aclFetchWatcher } from './ACLSaga';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        userListFetchWatcher(),\r\n        userFetchWatcher(),\r\n        aclFetchWatcher()\r\n    ]);\r\n}","import { combineReducers } from 'redux';\r\nimport { reducer as userListReducer } from \"./sagas/UserListSaga\";\r\nimport { reducer as userReducer } from \"./sagas/UserSaga\";\r\nimport { reducer as aclReducer } from \"./sagas/ACLSaga\";\r\n\r\nexport const reducers = combineReducers({\r\n    userListReducer,\r\n    userReducer,\r\n    aclReducer\r\n})","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {makeStyles} from \"@material-ui/core\";\nimport {BrowserRouter as Router, Route, Redirect, Switch} from \"react-router-dom\";\nimport createSagaMiddleware from 'redux-saga';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from \"react-redux\";\n\nimport UserList from './components/user-list';\nimport UserCard from \"./components/user-card\";\nimport rootSaga from './sagas/RootSaga';\nimport {reducers} from './reducers';\n\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n    reducers,\n    applyMiddleware(sagaMiddleware)\n);\nsagaMiddleware.run(rootSaga);\n\nfunction App() {\n    const classes = makeStyles(theme => ({\n        root: {\n            width: '100%',\n            marginTop: theme.spacing(3),\n            overflowX: 'auto',\n        }\n    }))();\n\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <Router>\n                    <Paper className={classes.root}>\n                        <Redirect from=\"/\" to=\"/users/page/1\"/>\n                        <Switch>\n                            <Route path=\"/users/page/:page\" component={UserList}/>\n                            <Route path=\"/users/:id\" component={UserCard}/>\n                        </Switch>\n                    </Paper>\n                </Router>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}